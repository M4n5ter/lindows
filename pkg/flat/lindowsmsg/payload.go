// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package lindowsmsg

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Payload struct {
	_tab flatbuffers.Table
}

func GetRootAsPayload(buf []byte, offset flatbuffers.UOffsetT) *Payload {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Payload{}
	x.Init(buf, n+offset)
	return x
}

func FinishPayloadBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsPayload(buf []byte, offset flatbuffers.UOffsetT) *Payload {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Payload{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedPayloadBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *Payload) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Payload) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Payload) P1() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Payload) MutateP1(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *Payload) P2() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Payload) MutateP2(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *Payload) P3() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Payload) MutateP3(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *Payload) P4() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func PayloadStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func PayloadAddP1(builder *flatbuffers.Builder, p1 int32) {
	builder.PrependInt32Slot(0, p1, 0)
}
func PayloadAddP2(builder *flatbuffers.Builder, p2 int32) {
	builder.PrependInt32Slot(1, p2, 0)
}
func PayloadAddP3(builder *flatbuffers.Builder, p3 int32) {
	builder.PrependInt32Slot(2, p3, 0)
}
func PayloadAddP4(builder *flatbuffers.Builder, p4 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(p4), 0)
}
func PayloadEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
