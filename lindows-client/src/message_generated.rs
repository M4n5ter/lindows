#![allow(unused_imports, clippy::missing_safety_doc)]
// automatically generated by the FlatBuffers compiler, do not modify

// @generated

use core::cmp::Ordering;
use core::mem;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod lindows_msg {

    use core::cmp::Ordering;
    use core::mem;

    extern crate flatbuffers;
    use self::flatbuffers::{EndianScalar, Follow};

    pub enum PayloadOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct Payload<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for Payload<'a> {
        type Inner = Payload<'a>;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table::new(buf, loc),
            }
        }
    }

    impl<'a> Payload<'a> {
        pub const VT_P1: flatbuffers::VOffsetT = 4;
        pub const VT_P2: flatbuffers::VOffsetT = 6;
        pub const VT_P3: flatbuffers::VOffsetT = 8;
        pub const VT_P4: flatbuffers::VOffsetT = 10;

        #[inline]
        pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            Payload { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<
            'bldr: 'args,
            'args: 'mut_bldr,
            'mut_bldr,
            A: flatbuffers::Allocator + 'bldr,
        >(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
            args: &'args PayloadArgs<'args>,
        ) -> flatbuffers::WIPOffset<Payload<'bldr>> {
            let mut builder = PayloadBuilder::new(_fbb);
            if let Some(x) = args.p4 {
                builder.add_p4(x);
            }
            builder.add_p3(args.p3);
            builder.add_p2(args.p2);
            builder.add_p1(args.p1);
            builder.finish()
        }

        #[inline]
        pub fn p1(&self) -> i32 {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<i32>(Payload::VT_P1, Some(0)).unwrap() }
        }
        #[inline]
        pub fn p2(&self) -> i32 {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<i32>(Payload::VT_P2, Some(0)).unwrap() }
        }
        #[inline]
        pub fn p3(&self) -> i32 {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<i32>(Payload::VT_P3, Some(0)).unwrap() }
        }
        #[inline]
        pub fn p4(&self) -> Option<&'a str> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<&str>>(Payload::VT_P4, None)
            }
        }
    }

    impl flatbuffers::Verifiable for Payload<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<i32>("p1", Self::VT_P1, false)?
                .visit_field::<i32>("p2", Self::VT_P2, false)?
                .visit_field::<i32>("p3", Self::VT_P3, false)?
                .visit_field::<flatbuffers::ForwardsUOffset<&str>>("p4", Self::VT_P4, false)?
                .finish();
            Ok(())
        }
    }
    pub struct PayloadArgs<'a> {
        pub p1: i32,
        pub p2: i32,
        pub p3: i32,
        pub p4: Option<flatbuffers::WIPOffset<&'a str>>,
    }
    impl<'a> Default for PayloadArgs<'a> {
        #[inline]
        fn default() -> Self {
            PayloadArgs {
                p1: 0,
                p2: 0,
                p3: 0,
                p4: None,
            }
        }
    }

    pub struct PayloadBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> PayloadBuilder<'a, 'b, A> {
        #[inline]
        pub fn add_p1(&mut self, p1: i32) {
            self.fbb_.push_slot::<i32>(Payload::VT_P1, p1, 0);
        }
        #[inline]
        pub fn add_p2(&mut self, p2: i32) {
            self.fbb_.push_slot::<i32>(Payload::VT_P2, p2, 0);
        }
        #[inline]
        pub fn add_p3(&mut self, p3: i32) {
            self.fbb_.push_slot::<i32>(Payload::VT_P3, p3, 0);
        }
        #[inline]
        pub fn add_p4(&mut self, p4: flatbuffers::WIPOffset<&'b str>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(Payload::VT_P4, p4);
        }
        #[inline]
        pub fn new(
            _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
        ) -> PayloadBuilder<'a, 'b, A> {
            let start = _fbb.start_table();
            PayloadBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<Payload<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl core::fmt::Debug for Payload<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            let mut ds = f.debug_struct("Payload");
            ds.field("p1", &self.p1());
            ds.field("p2", &self.p2());
            ds.field("p3", &self.p3());
            ds.field("p4", &self.p4());
            ds.finish()
        }
    }
    pub enum MessageOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct Message<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for Message<'a> {
        type Inner = Message<'a>;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table::new(buf, loc),
            }
        }
    }

    impl<'a> Message<'a> {
        pub const VT_EVENT: flatbuffers::VOffsetT = 4;
        pub const VT_PAYLOAD: flatbuffers::VOffsetT = 6;

        #[inline]
        pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            Message { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<
            'bldr: 'args,
            'args: 'mut_bldr,
            'mut_bldr,
            A: flatbuffers::Allocator + 'bldr,
        >(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
            args: &'args MessageArgs<'args>,
        ) -> flatbuffers::WIPOffset<Message<'bldr>> {
            let mut builder = MessageBuilder::new(_fbb);
            if let Some(x) = args.payload {
                builder.add_payload(x);
            }
            builder.add_event(args.event);
            builder.finish()
        }

        #[inline]
        pub fn event(&self) -> u8 {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<u8>(Message::VT_EVENT, Some(0)).unwrap() }
        }
        #[inline]
        pub fn payload(&self) -> Option<Payload<'a>> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<Payload>>(Message::VT_PAYLOAD, None)
            }
        }
    }

    impl flatbuffers::Verifiable for Message<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<u8>("event", Self::VT_EVENT, false)?
                .visit_field::<flatbuffers::ForwardsUOffset<Payload>>(
                    "payload",
                    Self::VT_PAYLOAD,
                    false,
                )?
                .finish();
            Ok(())
        }
    }
    pub struct MessageArgs<'a> {
        pub event: u8,
        pub payload: Option<flatbuffers::WIPOffset<Payload<'a>>>,
    }
    impl<'a> Default for MessageArgs<'a> {
        #[inline]
        fn default() -> Self {
            MessageArgs {
                event: 0,
                payload: None,
            }
        }
    }

    pub struct MessageBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MessageBuilder<'a, 'b, A> {
        #[inline]
        pub fn add_event(&mut self, event: u8) {
            self.fbb_.push_slot::<u8>(Message::VT_EVENT, event, 0);
        }
        #[inline]
        pub fn add_payload(&mut self, payload: flatbuffers::WIPOffset<Payload<'b>>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<Payload>>(Message::VT_PAYLOAD, payload);
        }
        #[inline]
        pub fn new(
            _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
        ) -> MessageBuilder<'a, 'b, A> {
            let start = _fbb.start_table();
            MessageBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<Message<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl core::fmt::Debug for Message<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            let mut ds = f.debug_struct("Message");
            ds.field("event", &self.event());
            ds.field("payload", &self.payload());
            ds.finish()
        }
    }
    #[inline]
    /// Verifies that a buffer of bytes contains a `Message`
    /// and returns it.
    /// Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `root_as_message_unchecked`.
    pub fn root_as_message(buf: &[u8]) -> Result<Message, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::root::<Message>(buf)
    }
    #[inline]
    /// Verifies that a buffer of bytes contains a size prefixed
    /// `Message` and returns it.
    /// Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `size_prefixed_root_as_message_unchecked`.
    pub fn size_prefixed_root_as_message(
        buf: &[u8],
    ) -> Result<Message, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::size_prefixed_root::<Message>(buf)
    }
    #[inline]
    /// Verifies, with the given options, that a buffer of bytes
    /// contains a `Message` and returns it.
    /// Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `root_as_message_unchecked`.
    pub fn root_as_message_with_opts<'b, 'o>(
        opts: &'o flatbuffers::VerifierOptions,
        buf: &'b [u8],
    ) -> Result<Message<'b>, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::root_with_opts::<Message<'b>>(opts, buf)
    }
    #[inline]
    /// Verifies, with the given verifier options, that a buffer of
    /// bytes contains a size prefixed `Message` and returns
    /// it. Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `root_as_message_unchecked`.
    pub fn size_prefixed_root_as_message_with_opts<'b, 'o>(
        opts: &'o flatbuffers::VerifierOptions,
        buf: &'b [u8],
    ) -> Result<Message<'b>, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::size_prefixed_root_with_opts::<Message<'b>>(opts, buf)
    }
    #[inline]
    /// Assumes, without verification, that a buffer of bytes contains a Message and returns it.
    /// # Safety
    /// Callers must trust the given bytes do indeed contain a valid `Message`.
    pub unsafe fn root_as_message_unchecked(buf: &[u8]) -> Message {
        flatbuffers::root_unchecked::<Message>(buf)
    }
    #[inline]
    /// Assumes, without verification, that a buffer of bytes contains a size prefixed Message and returns it.
    /// # Safety
    /// Callers must trust the given bytes do indeed contain a valid size prefixed `Message`.
    pub unsafe fn size_prefixed_root_as_message_unchecked(buf: &[u8]) -> Message {
        flatbuffers::size_prefixed_root_unchecked::<Message>(buf)
    }
    #[inline]
    pub fn finish_message_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
        fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
        root: flatbuffers::WIPOffset<Message<'a>>,
    ) {
        fbb.finish(root, None);
    }

    #[inline]
    pub fn finish_size_prefixed_message_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
        fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
        root: flatbuffers::WIPOffset<Message<'a>>,
    ) {
        fbb.finish_size_prefixed(root, None);
    }
} // pub mod LindowsMsg
